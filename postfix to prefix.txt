Algorithm for postfix to prefix conversion:

1.Read the Postfix expression from left to right
2.If the symbol is an operand, then push it onto the Stack
3.If the symbol is an operator, then pop two operands from the Stack 
  Create a string as string = operator + operand1 + operand2 and push the resultant string back to      Stack. First popped is operand2, second popped is operand1.
4.Repeat the above steps until end of Postfix expression.

Example:

Postfix expression: AB+C*

Steps:

Push 'A' → Stack: ['A']
Push 'B' → Stack: ['A', 'B']
Operator '+', pop 'B' and 'A', result +AB → Stack: ['+AB']
Push 'C' → Stack: ['+AB', 'C']
Operator '*', pop 'C' and '+AB', result *+ABC → Stack: ['*+ABC']

Final Prefix: *+ABC

#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to convert postfix expression to prefix
string postfixToPrefix(string postfix) {
    stack<string> s;

    // Traverse the postfix expression
    for (int i = 0; i < postfix.length(); i++) {
        char c = postfix[i];

        // If the character is an operand, push it onto the stack
        if (isalpha(c)) {
            s.push(string(1, c));
        }
        // If the character is an operator
        else if (isOperator(c)) {
            // Pop two operands from the stack
            string op2 = s.top(); s.pop();
            string op1 = s.top(); s.pop();
            
            // Combine them with the operator in prefix form
            string prefix = c + op1 + op2;
            
            // Push the resulting prefix expression back onto the stack
            s.push(prefix);
        }
    }

    // The final element in the stack is the prefix expression
    return s.top();
}

int main() {
    string postfix;
    cin >> postfix;
    cout << "Postfix Expression: " << postfix << endl;
    string prefix = postfixToPrefix(postfix);
    cout << "Prefix Expression: " << prefix << endl;
    return 0;
}

Sample Input:
AB+C*
Sample Output:
Postfix Expression: AB+C*
Prefix Expression: *+ABC





